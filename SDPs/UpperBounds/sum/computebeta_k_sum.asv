%% COMPUTEBETA_K_SUM    Computes the density matrix and the optimal value for the SDP involving the Symmetric Extensions relaxation
%   The function has six required input arguments:
%       K_list: cell of length N_SUMMANDS where each entry is a matrix of 
%       size DIM_A x DIM_A
%       L_list: cell of length N_SUMMANDS where each entry is a matrix of 
%       size DIM_B x DIM_B
%       N_SUMMANDS: number of Hermitian matrices that have to be summed over
%       DIM_B: integer that describes the dimension of the matrix for Bob
%       K: integer that describes the number of symmetric extensions
%       PPT: 1 to impose PPT criterion
%            0 otherwise
%
%   [RHO_K, BETA_K] = computebeta_k_sum(K_LIST, L_LIST, N_SUMMANDS, DIM_B,
%   K, PPT) computes the density matrix RHO_K and the optimal value BETA_K
%   of the SDP
%
%   URL:
%   https://ankith-mohan.github.io/SEP/SDPs/UpperBounds/sum_Herm/computebeta_k_sum.html
%
%   requires: cvx (http://cvxr.com/cvx/), SymmetricExtension
%   (http://www.qetlab.com/SymmetricExtension), HSIP.m
%   author: Ankith Mohan (ankithmo@vt.edu)
%   last updated: May 2, 2022


function [rho_k, beta_k] = computebeta_k_sum(K_list, L_list, N_summands, ...
                                                dim_B, k, PPT)
    dim = size(K_list{1}, 1) * size(L_list{1}, 1);
    cvx_begin sdp quiet
        variable rho_k(dim, dim) complex semidefinite;
        % Objective function
        obj = 0;
        for j = 1:N_summands
            obj = obj + HSIP(rho_k, Tensor(K_list{j}, L_list{j}));
        end
        maximize obj
        subject to
            % density matrix constraint
            trace(rho_k) == 1;
            % Symmetric extension constraint
            SymmetricExtension(rho_k, k, dim_B, PPT, 0, eps^(1/4));
    cvx_end
    beta_k = 0;
    for j = 1:N_summands
        beta_k = beta_k + HSIP(rho_k, Tensor(K_list{j}, L_list{j}));
    end
end